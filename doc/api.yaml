#%RAML 1.0
title: "Skautský zpěvník"
version: "v0.3"
protocols:
- "HTTPS"
baseUri: "https://zpevnik.skauting.cz/api/"
annotationTypes:
  x-restlet: "any"
types:
  Song:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      authors:
        type: "object"
        properties:
          music:
            type: "array"
            description: "Identifiers of Authors"
            items:
              type: "string"
          lyrics:
            type: "array"
            description: "Identifiers of Authors"
            items:
              type: "string"
        example:
          value: "{'music': [], 'lyrics': []}"
          strict: false
      interpreters:
        type: "array"
        description: "Identifiers of Interpreters"
        items:
          type: "string"
      created:
        type: "datetime"
      approved:
        type: "boolean"
      variants:
        type: "array"
        description: "This item is added for better comfort of client application."
        items:
          type: "Song variant"
    (x-restlet):
      section: "Objects"
  Song variant:
    type: "object"
    properties:
      id:
        type: "string"
      song_id:
        type: "string"
        required: false
      owner:
        type: "string"
      text:
        type: "string"
      description:
        type: "string"
      visibility:
        type: "number"
      created:
        type: "datetime"
    (x-restlet):
      section: "Objects"
  Author:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      created:
        type: "datetime"
        required: false
    (x-restlet):
      section: "Objects"
  Interpreter:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      created:
        type: "datetime"
        required: false
    (x-restlet):
      section: "Objects"
  Songbook:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      songs:
        type: "array"
        items:
          type: "Songbook_extended_item"
      options:
        type: "Songbook_options"
      owner:
        type: "string"
      created:
        type: "datetime"
        required: false
    (x-restlet):
      section: "Objects"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      editor:
        type: "string"
      active:
        type: "boolean"
      created:
        type: "datetime"
        required: false
      last_login:
        type: "datetime"
        required: false
      logout_link:
        type: "string"
    (x-restlet):
      section: "Objects"
  Song_request:
    type: "object"
    properties:
      title:
        type: "string"
      authors:
        type: "object"
        properties:
          music:
            type: "array"
            description: "Array of music author ids"
            items:
              type: "string"
          lyrics:
            type: "array"
            description: "Array of lyrics author ids"
            items:
              type: "string"
        example:
          value: "{'music': [], 'lyrics': []}"
          strict: false
      interpreters:
        type: "array"
        description: "Identifiers of Interpreters"
        items:
          type: "string"
    (x-restlet):
      section: "Objects"
  Song_request_extended:
    type: "object"
    description: "Extended request for songs also contains one variant. This one is\
      \ used only for new song creation.\n\nIt should make sence to make just one\
      \ request for both of these entities."
    properties:
      title:
        type: "string"
      authors:
        type: "object"
        properties:
          music:
            type: "array"
            description: "Array of music author ids"
            items:
              type: "string"
          lyrics:
            type: "array"
            description: "Array of lyrics author ids"
            items:
              type: "string"
        example:
          value: "{'music': [], 'lyrics': []}"
          strict: false
      interpreters:
        type: "array"
        description: "Identifiers of Interpreters"
        items:
          type: "string"
      variant:
        type: "Song variant_request"
    (x-restlet):
      section: "Objects"
  Song variant_request:
    type: "object"
    properties:
      text:
        type: "string"
      description:
        type: "string"
      visibility:
        type: "string"
        required: false
    (x-restlet):
      section: "Objects"
  Author_request:
    type: "object"
    properties:
      name:
        type: "string"
    (x-restlet):
      section: "Objects"
  Interpreter_request:
    type: "object"
    properties:
      name:
        type: "string"
    (x-restlet):
      section: "Objects"
  Songbook_request:
    type: "object"
    properties:
      title:
        type: "string"
      songs:
        type: "array"
        items:
          type: "Songbook_item"
      options:
        type: "Songbook_options"
    (x-restlet):
      section: "Objects"
  Songbook_title_request:
    type: "object"
    properties:
      title:
        type: "string"
    (x-restlet):
      section: "Objects"
  Songbook_songs_request:
    type: "object"
    properties:
      songs:
        type: "array"
        items:
          type: "Songbook_item"
    (x-restlet):
      section: "Objects"
  Songbook_options_request:
    type: "object"
    properties:
      options:
        type: "Songbook_options"
    (x-restlet):
      section: "Objects"
  Songbook_item:
    type: "object"
    properties:
      variant_id:
        type: "string"
        description: "ObjectId of given variant"
      order:
        type: "number"
        required: false
    (x-restlet):
      section: "Objects"
  Songbook_extended_item:
    type: "object"
    properties:
      variant_id:
        type: "string"
        description: "ObjectId of given variant"
      order:
        type: "number"
        required: false
      owner:
        type: "string"
        required: false
      visibility:
        type: "number"
        required: false
      song:
        type: "object"
        required: false
        properties:
          song_id:
            type: "string"
          title:
            type: "string"
            required: false
          Interpreters:
            type: "string"
            description: "Identifiers of Interpreters"
            required: false
    (x-restlet):
      section: "Objects"
  Songbook_options:
    type: "object"
    description: "This object represents options for each songbook. If some of them\
      \ is not set with request, default values are used (no error is raised!)"
    properties:
      size:
        type: "string"
        description: "One of predefined page sizes"
        enum:
        - "A4"
        - "A5"
        - "A4 WIDE"
        - "A5 WIDE"
        required: false
      columns:
        type: "number"
        description: "Number of columns in exported songbook"
        required: false
      index:
        type: "boolean"
        description: "Songbook will have song index"
        required: false
      chorded:
        type: "boolean"
        description: "Songbook will have chords above all songs"
        required: false
      front_index:
        type: "boolean"
        description: "Songbook index is in front of the songbook (has no effect if\
          \ index is set to False)"
        required: false
      page_numbering:
        type: "boolean"
        description: "Songbook pages are numbered"
        required: false
      song_numbering:
        type: "boolean"
        description: "Individual songs are numbered"
        required: false
    (x-restlet):
      section: "Objects"
  Response:
    type: "object"
    properties:
      message:
        type: "string"
    (x-restlet):
      section: "Misc"
  Redirect:
    type: "object"
    properties:
      link:
        type: "string"
    (x-restlet):
      section: "Misc"
  Error:
    type: "array"
    description: "Structure of any server related application error."
    items:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error code"
        message:
          type: "string"
          description: "Human readable message about error"
        data:
          type: "string"
          description: "Additional information about error"
          required: false
    example:
      value: "[\n  {\"code\": \"missing_field\", \"message\": \"Song id is missing.\
        \ \", \"data\": \"id\"},\n  ...\n]"
      strict: false
    (x-restlet):
      section: "Misc"
securitySchemes:
  skautIS Auth:
    type: "x-custom"
/songs:
  get:
    displayName: "Get list of songs"
    description: "This endpoint always returns songs, which have at least one variant\
      \ accessible by user. This means, that variant dict key will always contain\
      \ atleast one variant."
    queryParameters:
      query:
        type: "string"
        description: "Query string (song name)."
        required: false
      page:
        type: "integer"
        format: "int32"
        description: "Page of paged result."
        default: 0
        minimum: 0
        required: false
      per_page:
        type: "integer"
        format: "int32"
        description: "Number of songs on one page."
        default: 30
        minimum: 1
        maximum: 200
        required: false
      order:
        type: "string"
        description: "Result sorting."
        enum:
        - "title"
        - "title_desc"
        required: false
    responses:
      200:
        description: "Successful server search (0+ songs)."
        body:
          application/json:
            type: "object"
            properties:
              count:
                type: "integer"
                description: "Number of found songs."
              pages:
                type: "string"
                description: "Number of pages for current *per_page* value."
              data:
                type: "array"
                description: "Array of songs itself."
                items:
                  type: "Song"
            example:
              value: "{\n  \"count\": 103,\n  \"data\": [...],\n  \"pages\": 52\n}"
              strict: false
      400:
        description: "Request contains invalid parameters."
        body:
          application/json:
            type: "Error"
  post:
    displayName: "Create new song"
    body:
      application/json:
        type: "Song_request_extended"
    responses:
      201:
        description: "Song was successfully created"
        headers:
          Location:
            type: "string"
            example: "/songs/1/variants/3"
        body:
          application/json:
            type: "Redirect"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure or with sing syntax."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songs/{song_id}:
  uriParameters:
    song_id:
      type: "string"
  get:
    displayName: "Get song"
    responses:
      200:
        body:
          application/json:
            type: "Song"
      404:
        description: "Song was not found."
        body:
          application/json:
            type: "Error"
  put:
    displayName: "Edit song"
    body:
      application/json:
        type: "Song_request"
    responses:
      200:
        description: "Song was successfully saved."
        body:
          application/json:
            type: "Song"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure or with song syntax."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songs/{song_id}/variants:
  uriParameters:
    song_id:
      type: "string"
  get:
    displayName: "Get list of variants of song"
    description: "Get list of visible variants for given song."
    responses:
      200:
        description: "Successful server search (0+ variants)."
        body:
          application/json:
            type: "array"
            items:
              type: "Song variant"
      404:
        description: "Song was not found."
        body:
          application/json:
            type: "Error"
  post:
    displayName: "Create new variant of song"
    body:
      application/json:
        type: "Song variant_request"
    responses:
      201:
        description: "Song variant was successfully created"
        headers:
          Location:
            type: "string"
            example: "/songs/1/variants/3"
        body:
          application/json:
            type: "Redirect"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song was not found."
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songs/{song_id}/variants/{variant_id}:
  uriParameters:
    song_id:
      type: "string"
    variant_id:
      type: "string"
  get:
    displayName: "Get variant of song"
    headers:
      Accept:
        type: "string"
        description: "If Accept header is explicitly set as `application/pdf`, json\
          \ with endpoint pointing at generated file is returned. In the other case\
          \ detail of the songbook in standard `json` is returned."
        default: "application/json"
        enum:
        - "application/json"
        - "application/pdf"
    responses:
      200:
        body:
          application/json:
            type: "Song variant"
          application/pdf:
            type: "object"
            description: "Response for generated pdf."
            example:
              value: "{\"link\": \"/download/2b573863-71b1-4463-96a7-e7fae9ba3865.pdf\"\
                }"
              strict: false
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song or variant of song were not found."
        body:
          application/json:
            type: "Error"
  put:
    displayName: "Edit variant of song"
    body:
      application/json:
        type: "Song variant_request"
    responses:
      200:
        description: "Song variant was successfully saved."
        body:
          application/json:
            type: "Song"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song of variant of song were not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure or with song syntax."
        body:
          application/json:
            type: "Error"
  delete:
    displayName: "Delete variant of song"
    description: "In case that operation is successfull and given variant was last\
      \ one of given song, the song is also deleted from the database. This prevents\
      \ unreachable songs with no variants.\n\nClient should therefore also delete\
      \ any connection to this song."
    responses:
      204:
        description: "Song variant was successfully deleted."
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song or variant of song were not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songs/{song_id}/variant/{variant_id}/duplicate:
  uriParameters:
    song_id:
      type: "string"
    variant_id:
      type: "string"
  get:
    displayName: "Duplicate variant of song"
    responses:
      200:
        body:
          application/json:
            type: "Song"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Song of variant of song were not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/authors:
  get:
    displayName: "Get list of authors"
    responses:
      200:
        description: "Successful server search (0+ authors)."
        body:
          application/json:
            type: "array"
            items:
              type: "Author"
  post:
    displayName: "Create new authors"
    body:
      application/json:
        type: "Author_request"
    responses:
      201:
        description: "Author was successfully created."
        headers:
          Location:
            type: "string"
            example: "/authors/1/"
        body:
          application/json:
            type: "Redirect"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure or author already exists."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/authors/{author_id}:
  uriParameters:
    author_id:
      type: "string"
  get:
    displayName: "Get author"
    responses:
      200:
        body:
          application/json:
            type: "Author"
      404:
        description: "Author was not found."
        body:
          application/json:
            type: "Error"
  put:
    displayName: "Edit author"
    body:
      application/json:
        type: "Author_request"
    responses:
      200:
        description: "Author was successfully saved."
        body:
          application/json:
            type: "Author"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Author was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  delete:
    displayName: "Delete author"
    responses:
      204:
        description: "Author was successfully deleted."
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Author was not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/interpreters:
  get:
    displayName: "Get list of interpreters"
    responses:
      200:
        description: "Successful server search (0+ interpreters)."
        body:
          application/json:
            type: "array"
            items:
              type: "Interpreter"
  post:
    displayName: "Create new interpreter"
    body:
      application/json:
        type: "Interpreter_request"
    responses:
      201:
        description: "Interpreter was successfully created."
        headers:
          Location:
            type: "string"
            example: "/authors/1/"
        body:
          application/json:
            type: "Redirect"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure or interpreter already exists."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/interpreters/{interpreter_id}:
  uriParameters:
    interpreter_id:
      type: "string"
  get:
    displayName: "Get interpreter"
    responses:
      200:
        body:
          application/json:
            type: "Interpreter"
      404:
        description: "Interpreter was not found."
        body:
          application/json:
            type: "Error"
  put:
    displayName: "Edit interpreter"
    body:
      application/json:
        type: "Interpreter_request"
    responses:
      200:
        description: "Interpreter was successfully saved."
        body:
          application/json:
            type: "Interpreter"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Interpreter was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  delete:
    displayName: "Delete interpreter"
    responses:
      204:
        description: "Interpreter was successfully deleted."
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Interpreter was not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks:
  get:
    displayName: "Get list of songbooks"
    queryParameters:
      query:
        type: "string"
        description: "Query string (songbook name)."
        required: false
      page:
        type: "integer"
        format: "int32"
        description: "Page of paged result."
        default: 0
        minimum: 0
        required: false
      per_page:
        type: "integer"
        format: "int32"
        description: "Number of songbooks per one page."
        default: 30
        minimum: 1
        maximum: 200
        required: false
    responses:
      200:
        description: "Successful server search (0+ songbooks)."
        body:
          application/json:
            type: "object"
            properties:
              count:
                type: "integer"
                description: "Number of found songbooks."
              pages:
                type: "string"
                description: "Number of pages for current *per_page* value."
              data:
                type: "array"
                description: "Array of songbooks itself."
                items:
                  type: "Songbook"
            example:
              value: "{\n  \"count\": 103,\n  \"data\": [...],\n  \"pages\": 52\n}"
              strict: false
      400:
        description: "Request contains invalid parameters."
        body:
          application/json:
            type: "Error"
  post:
    displayName: "Create new songbook"
    body:
      application/json:
        type: "Songbook_title_request"
    responses:
      201:
        description: "Songbook was successfully created"
        headers:
          Location:
            type: "string"
            example: "/songbooks/1/"
        body:
          application/json:
            type: "Redirect"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks/{songbook_id}:
  uriParameters:
    songbook_id:
      type: "string"
  get:
    displayName: "Get songbook"
    headers:
      Accept:
        type: "string"
        description: "If Accept header is explicitly set as `application/pdf`, json\
          \ with endpoint pointing at generated file is returned. In the other case\
          \ detail of the songbook in standard `json` is returned."
        default: "application/json"
        enum:
        - "application/json"
        - "application/pdf"
    responses:
      200:
        body:
          application/json:
            type: "Songbook"
          application/pdf:
            type: "object"
            description: "Response for generated pdf."
            example:
              value: "{\"link\": \"/download/2b573863-71b1-4463-96a7-e7fae9ba3865.pdf\"\
                }"
              strict: false
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Songbook was not found."
        body:
          application/json:
            type: "Error"
      500:
        description: "Compilation ended with errors. Error structure contains additional\
          \ data about the problem."
        body:
          application/json:
            type: "Error"
  put:
    displayName: "Edit songbook"
    body:
      application/json:
        type: "Songbook_request"
    responses:
      200:
        description: "Songbook was successfully saved."
        body:
          application/json:
            type: "Songbook"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Response in case that songbook was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  delete:
    displayName: "Delete songbook"
    responses:
      204:
        description: "Songbook was successfully deleted."
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Songbook was not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks/{songbook_id}/title:
  uriParameters:
    songbook_id:
      type: "string"
  put:
    displayName: "Edit songbook title"
    body:
      application/json:
        type: "Songbook_title_request"
    responses:
      200:
        description: "Songbook title was successfully saved."
        body:
          application/json:
            type: "Songbook"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Response in case that songbook was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks/{songbook_id}/songs:
  uriParameters:
    songbook_id:
      type: "string"
  put:
    displayName: "Edit songbook list of songs"
    body:
      application/json:
        type: "Songbook_songs_request"
    responses:
      200:
        description: "Songbook list of songs was successfully saved."
        body:
          application/json:
            type: "Songbook"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Response in case that songbook was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks/{songbook_id}/options:
  uriParameters:
    songbook_id:
      type: "string"
  put:
    displayName: "Edit songbook options"
    body:
      application/json:
        type: "Songbook_options_request"
    responses:
      200:
        description: "Songbook options were successfully saved."
        body:
          application/json:
            type: "Songbook"
      400:
        description: "Invalid json request."
        body:
          application/json:
            type: "Error"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Response in case that songbook was not found."
        body:
          application/json:
            type: "Error"
      422:
        description: "Problem with sent structure."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/songbooks/{sonbookg_id}/duplicate:
  uriParameters:
    sonbookg_id:
      type: "string"
  get:
    displayName: "Duplicate songbook"
    responses:
      201:
        headers:
          Location:
            type: "string"
            example: "/songbooks/2/"
        body:
          application/json:
            type: "Redirect"
      403:
        description: "Insufficient permissions."
        body:
          application/json:
            type: "Error"
      404:
        description: "Songbook was not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
/user:
  get:
    displayName: "Get info about current user"
    responses:
      200:
        body:
          application/json:
            type: "User"
  (x-restlet):
    section: "API endpoints"
/users/{user_id}:
  uriParameters:
    user_id:
      type: "string"
  get:
    displayName: "Get info about user"
    responses:
      200:
        body:
          application/json:
            type: "Response"
            description: "Returns name only."
            example:
              value: "{\"name\": \"John Bonham\"}"
              strict: false
      404:
        description: "User was not found."
        body:
          application/json:
            type: "Error"
  (x-restlet):
    section: "API endpoints"
(x-restlet):
  sections:
    Objects: {}
    API endpoints: {}
    Misc: {}
